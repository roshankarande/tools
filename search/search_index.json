{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"misc/2/","title":"Locust :: Load Testing","text":"<ul> <li>Website</li> <li>Source code</li> </ul>"},{"location":"misc/2/#basic-setup","title":"Basic Setup","text":"<pre><code>pip install locust\nlocust --help\nlocust -f main.py --headless --users 10 --spawn-rate 1 --runtime 200s -H http://api-host\nlocust -f main.py --users 10 --spawn-rate 1 --runtime 200s -H http://api-host\n</code></pre> <ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"misc/2/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"misc/2/#code-blocks","title":"Code Blocks","text":"<pre><code>import tensorflow as tf\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI \nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>Info</p> <p>Because we have two columns called name, one for hero and one for team, we can specify them with the prefix of the table name and the dot to make it explicit what we refer to.</p> <p>Warning</p> <p>Remember compatibility is everything</p> Python 3.10+Python 3.7+ <pre><code>print(\"Hello\")\n</code></pre> <pre><code>print(\"Hello\")\n</code></pre>"},{"location":"misc/2/#code-below-omitted","title":"Code below omitted \ud83d\udc47","text":""},{"location":"misc/clis/","title":"clis","text":"<ul> <li> <p>tokei <pre><code>cargo binstall tokei\n</code></pre></p> </li> <li> <p>gitui <pre><code>cargo binstall gitui\n</code></pre></p> </li> <li> <p>golang <pre><code>wget //link of the file .. and then instructions\nhttps://go.dev/doc/install\n</code></pre></p> </li> </ul>"},{"location":"misc/docker/","title":"docker","text":""},{"location":"misc/docker/#docker","title":"Docker","text":""},{"location":"misc/docker/#docker-compose","title":"Docker Compose","text":""},{"location":"misc/docker/#docker-desktop-for-windows","title":"Docker Desktop for Windows","text":""},{"location":"misc/gcc_g%2B%2B/","title":"gcc/g++","text":""},{"location":"misc/gcc_g%2B%2B/#installation","title":"Installation","text":"<ul> <li>Install C++ plugin for vscode</li> <li>C++ Extensions Pack for vscode</li> </ul> <p>Instruction Link</p> \ud83d\udc40 Instructions linuxwindowsconfig <pre><code># You should be able to use any of the listed mirrors by adding a line to your \n# /etc/apt/sources.list  - like this:\n\ndeb http://cz.archive.ubuntu.com/ubuntu noble main universe\n\nsudo apt update\nsudo apt install gcc-14\nsudo apt install g++-14\n\ngcc --version\ng++ --version\n</code></pre> <pre><code># Follow this link for detailed instructions\n# https://code.visualstudio.com/docs/cpp/config-mingw \nhttps://github.com/msys2/msys2-installer/releases/download/2024-01-13/msys2-x86_64-20240113.exe\n\npacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain\n\n# PATH add :: C:\\msys64\\ucrt64\\bin\n\n# Verify\ngcc --version\ng++ --version\ngdb --version\n</code></pre> <pre><code># First time you run your program  :: automatically generate\n# .vscode/tasks.json\n\n{\n  \"tasks\": [\n    {\n      \"type\": \"cppbuild\",\n      \"label\": \"C/C++: g++.exe build active file\",\n      \"command\": \"C:\\\\msys64\\\\ucrt64\\\\bin\\\\g++.exe\",\n      \"args\": [\n        \"-fdiagnostics-color=always\",\n        \"-g\",\n        \"${file}\",\n        \"-o\",\n        \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"\n      ],\n      \"options\": {\n        \"cwd\": \"${fileDirname}\"\n      },\n      \"problemMatcher\": [\"$gcc\"],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      \"detail\": \"Task generated by Debugger.\"\n    }\n  ],\n  \"version\": \"2.0.0\"\n}\n</code></pre>"},{"location":"misc/linux/","title":"Linux","text":"<pre><code>dpkg -l | grep gcc\nsudo apt-get -s purge gcc-5 // replace 5  # with your version\n</code></pre>"},{"location":"misc/locust/","title":"Locust :: Load Testing","text":"<ul> <li>Website</li> <li>Source code</li> <li>Docs</li> <li>config</li> </ul>"},{"location":"misc/locust/#basic-setup","title":"Basic Setup","text":"<pre><code>pip install locust\nlocust --help\n</code></pre>"},{"location":"misc/locust/#run-locust","title":"Run locust","text":"<pre><code># headless mode -- preferred for speed\nlocust -f main.py --headless --users 10 --spawn-rate 1 --runtime 200s -H http://api-host\n\n# normal mode -- preferred for interactivity -- browser based control\nlocust -f main.py --users 10 --spawn-rate 1 --runtime 200s -H http://api-host\n</code></pre>"},{"location":"misc/locust/#code-snippets","title":"Code Snippets","text":"\ud83d\udc40 Example Example 01Example 02Example 03 <pre><code>from locust import HttpUser, task, between\n\nclass WebsiteUser(HttpUser):\n   wait_time = between(5, 15)\n\n   @task\n   def homepage(self):\n      self.client.get(\"/\")\n    # self.client.get(\"/\", headers={}, params={})\n</code></pre> <pre><code>from locust import HttpUser, task, between\n\nclass WebsiteUser(HttpUser):\n   wait_time = between(5, 15)\n\n   @task(2)\n   def homepage(self):\n      self.client.get(\"/\")\n\n   @task(1)\n   def about_page(self):\n      self.client.get(\"/about/\")\n</code></pre> <pre><code>from locust import HttpUser, task, between, SequentialTaskSet\n\nclass UserBehavior(SequentialTaskSet):\n\n   @task\n   def homepage(self):\n      self.client.get(\"/\")\n\n   @task\n   def about_page(self):\n      self.client.get(\"/about/\")\n\nclass WebsiteUser(HttpUser):\n   tasks = [UserBehavior]\n   wait_time = between(5, 15)\n</code></pre>"},{"location":"misc/mkdocs/","title":"Mkdocs","text":"<pre><code>sudo apt install python3.12-venv\npython3 -m venv .venv\nchown -R heyia .venv\nsource ./.venv/bin/activate\npip install mdx_include\n</code></pre> <pre><code>cd tools # webiste name\nmkdocs serve\n</code></pre>"},{"location":"misc/nvidia/","title":"nvidia","text":""},{"location":"misc/nvidia/#references","title":"References","text":"<ul> <li>Cuda Installation for MS Windows</li> <li>Cuda for WSL </li> <li> <p>Cuda for WSL</p> </li> <li> <p>Downloads</p> </li> </ul>"},{"location":"misc/nvidia/#prerequisites-helpful","title":"Prerequisites / Helpful","text":"<ul> <li>Install cpu-z</li> </ul>"},{"location":"misc/nvidia/#installation-instructions","title":"Installation Instructions","text":"<p>Warning</p> <p>Remember! Compatibility is Everything...</p> <p>Hardware :: Cuda Version :: GCC / G++ Version (should all be compatible with each other)</p> <pre><code># THIS WORKS!!\nwget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-keyring_1.1-1_all.deb\nsudo dpkg -i cuda-keyring_1.1-1_all.deb\n\nsudo apt-get update\nsudo apt-get install cuda-toolkit\n# sudo apt install nvidia-cuda-toolkit  # see if it works without this ... should work\nhttps://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions\n\n# SET Environment Variables\n# .bashrc\nexport PATH=/usr/local/cuda-12.4/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-12.4/lib64\n</code></pre> <pre><code>nvidia-smi\n</code></pre>"},{"location":"misc/rust/","title":"Install","text":"<ul> <li>binstall</li> </ul> \ud83d\udc40 Instructions <pre><code># linux\ncurl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash\n\n# windows\nSet-ExecutionPolicy Unrestricted -Scope Process; iex (iwr \"https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.ps1\").Content\n</code></pre> <ul> <li>uv </li> </ul> \ud83d\udc40 Instructions <pre><code># linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh \n\n# windows\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <ul> <li>evcxr_repl</li> <li>evcxr_jupyter</li> </ul> \ud83d\udc40 Instructions installconfigdebugtodo <pre><code>rustup component add rust-src\nsudo apt install jupyter-notebook\ncargo binstall evcxr_jupyter\ncargo binstall evcxr_repl\nevcxr_jupyter --install\n</code></pre> <pre><code>jupyter notebook --generate-config\n\n# open it and add the following\n c.NotebookApp.token = ''\n c.NotebookApp.password = u''\n# c.NotebookApp.open_browser = True\n# c.NotebookApp.ip = 'localhost'\n</code></pre> <pre><code># jupyter notebook mode\njupyter notebook --no-browser\n# either via browser or via vscode - manually enter the url\n\n\n# repl mode\nevcxr\n&gt;&gt; :dep num_cpus\n    Compiling num_cpus v1.16.0\n&gt;&gt; num_cpus::get()\n12\n</code></pre> <pre><code># TODO :: Create a docker container for evcrx and jupyter\n# ADD :: python as well to it\n\n# https://hub.docker.com/r/hgfkeep/rust-jupyter\n# or docker compose ... and stuff for evcxr_repl // especially jupyter\n\nversion: '3.8'\nservices:\n  some_name:\n    ports: ['8888:8888']  # docker run -p option\n    image: jupyter/minimal-notebook:57f8546c0386\n    command: start-notebook.sh --NotebookApp.token=''\n</code></pre> <ul> <li>rustup doc - offline doc</li> </ul> \ud83d\udc40 Instructions <pre><code># wsl\nsudo apt-get install -y xdg-utils # https://github.com/4U6U57/wsl-open\n\n# .bashrc :: add :: \nexport BROWSER=\"/mnt/c/Program Files/Google/Chrome/Application/chrome.exe\"\nrustup doc # should work now\n</code></pre>"},{"location":"misc/software/","title":"software","text":"<ul> <li>obsidian</li> <li>https://github.com/qishibo/AnotherRedisDesktopManager</li> <li>insomnia</li> <li>notepadplusplus</li> <li>docker desktop</li> <li>tree size </li> <li>vlc player</li> <li>vscode</li> <li>jetbrains </li> <li>cpuid </li> <li>google drive</li> </ul>"},{"location":"misc/telemetery/","title":"telemetery","text":"<pre><code>git clone -b main https://github.com/SigNoz/signoz.git --depth=1\ncd signoz/deploy\n\n# Comment services ::  load-hotrod: hotrod:\n\ndocker-compose up -d\n# http://localhost:3301/\n\ndocker-compose down -v\n</code></pre> <p>https://signoz.io/docs/operate/docker-standalone/#remove-the-sample-application-from-signoz-dashboard</p> <p>https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/ https://opentelemetry.io/docs/languages/python/automatic/example/</p> <p>https://signoz.io/blog/opentelemetry-docker/ <pre><code>docker run -p 8080:80 -d nginx:latest\ndocker run  -p 8081:80 -d httpd:latest\n</code></pre></p>"},{"location":"misc/todo/","title":"List","text":"<ul> <li>Learn about dev containers</li> <li>hurl</li> <li>insomnia</li> </ul>"},{"location":"misc/vscode/","title":"vscode","text":"<pre><code>crates\ncodelldb\nrust analyzer\ntodo tree\nOpenAPI (Swagger) Editor\ngo\nc++\nc/c++ extensions pack\npython\nrest client\nremote-ssh\nwsl\nredis\nproject-dashboard\npeacock\ntodo-tree\npretiffy-json\nindent rainbow\ndocker\njupter\nredis\nremote explorer\ngit history\n</code></pre> <ul> <li>Project dashboard <pre><code># How to add wsl paths\nwsl --list  (Ubuntu-22.04 (Default))  -&gt; so enter \nvscode-remote://wsl+Ubuntu-22.04/home/heyia/test_rust\n</code></pre></li> </ul>"},{"location":"misc/wsl/","title":"WSL","text":""},{"location":"misc/wsl/#references","title":"References","text":"<ul> <li>Microsoft WSL Info</li> </ul> <pre><code>wsl --shutdown # to shutdown \nwsl # to start          distro in wsl\nwsl -d {distro_name} # to start particular distro\nwsl -l -v # list all distros\nwsl --set-default-version 2 \nwsl --setdafault {distro_name} # to set the default distro\n</code></pre>"},{"location":"section/1/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"section/1/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"section/1/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>``` plotly {     \"data\": [         {             \"x\": [                 \"giraffes\",                 \"orangutans\",                 \"monkeys\"             ],             \"y\": [                 20,                 14,                 23             ],             \"type\": \"bar\"         }     ] }</p>"},{"location":"section/2/","title":"Mkdocs Plotly Plugin","text":"<p>MkDocs plugin to create interactive charts from data using the declarative plotly's json syntax. </p> <p>Includes supports for mkdocs-material theme features like instant loading and dark color themes.</p>"},{"location":"section/2/#installation","title":"Installation","text":"<p>Install the plugin using <code>pip3</code>:</p> <pre><code>pip install mkdocs-plotly-plugin \n</code></pre> <p>And then add the plugin into <code>plugins</code> and the custome fence</p> <pre><code>plugins:\n  - plotly\n\nmarkdown_extensions:\n  - pymdownx.superfences:\n      custom_fences:\n        - name: plotly\n          class: plotly\n          format: !!python/name:mkdocs_plotly_plugin.fences.fence_plotly\n</code></pre>"},{"location":"section/2/#usage","title":"Usage","text":"<p>You can insert any valid plotly JSON as a codeblock using: <pre><code>``` plotly\n{\n    \"data\": [\n        {\n            \"x\": [\n                \"giraffes\",\n                \"orangutans\",\n                \"monkeys\"\n            ],\n            \"y\": [\n                20,\n                14,\n                23\n            ],\n            \"type\": \"bar\"\n        }\n    ]\n}\n```\n</code></pre></p> <pre><code>{\n    \"data\": [\n        {\n            \"x\": [\n                \"giraffes\",\n                \"orangutans\",\n                \"monkeys\"\n            ],\n            \"y\": [\n                20,\n                14,\n                23\n            ],\n            \"type\": \"bar\"\n        }\n    ]\n}\n</code></pre> <p>This is compatiable with <code>snipplets</code> as well</p> <pre><code>```plotly\n--8&lt;-- \"assets/data.json\"\n```\n</code></pre> <pre><code>\n</code></pre> <p>or you can insert any plotly JSON through URLs</p> <pre><code>```plotly\n{\"file_path\": \"./assets/data.json\"}\n```\n</code></pre> <p><pre><code>{\"file_path\": \"./assets/data.json\"}\n</code></pre> !!!note \"Snipplets vs. file path\"</p> <pre><code>Using `snipplets` will insert the json content into the output HTML file, which is more suitable for smaller datasets. Using `file_path` will fetch the json content once the page is loaded.\n</code></pre> <p>!!!note \"Plotly JSON\"</p> <pre><code>Plotly has its own eco-system for creating charts in most statistical languages. You can output the plot as a json file through `fig.to_json()`.\n</code></pre>"},{"location":"section/2/#options","title":"Options","text":"Option Default Description lib_path Relative path to local <code>plotly.js</code> file, or leave it blank to use CDN. template_default <code>plotly_min</code> template for plotly charts in light mode template_slate <code>plotly_dark_min</code> template for plotly charts in dark mode enable_template True use template to automatically change theme <p>!!! note Plotly templates     Available Plotly templates are <code>[\"plotly\", \"plotly_white\", \"plotly_dark\", \"ggplot2\", \"seaborn\", \"simple_white\", \"none\"]</code>. If you want to customize your own template, you can export it as a JSON file and provide its path in options relative to <code>doc_dir</code>.</p>"}]}